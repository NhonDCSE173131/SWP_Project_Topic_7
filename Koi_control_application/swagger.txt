openapi: 3.0.0
info:
  title: Koi Control Application API
  description: API for managing koi fish control system
  version: 1.0.0
  contact:
    email: your.email@example.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
  - url:  https://koi-controls-e5hxekcpd0cmgjg2.eastasia-01.azurewebsites.net/
    description: Host development server

tags:
  - name: users
    description: User management
  - name: admin
    description: User management

paths:
  /api/user:
    get:
      summary: Get user by ID
      tags:
        - users
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/register:
    post:
      summary: Register a new user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/login:
    post:
      summary: User login
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Bad request or login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/user/manage/readAll:
    get:
        summary: Read all users records
        tags:
          - admin
        responses:
          '200':
            description: Successful reads all records , data return a list
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BaseResponse'
                
                
          '400':
            description: Bad request 
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
  /api/user/manage/remove:
    delete:
        summary: Read all users records
        tags:
          - admin
        parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: integer
        responses:
          '200':
            description: Successful reads all records , data return any 
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BaseResponse'
                
                
          '400':
            description: Bad request 
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
                                   
components:
  schemas:
    ResponseUser:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
    Register:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Users:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
        address:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        timeStamp:
          type: string
          format: date-time
    BaseResponse:
      type: object
      properties:
        data:
         $ref: '#/components/schemas/ResponseUser'
        statusCode:
          type: integer
        message:
          type: string